{
  "tests": [
    {
      "name": "NoTypes",
      "rule": "UniqueTypeNames",
      "schema": 0,
      "query": "\n      directive @test on SCHEMA\n    ",
      "errors": []
    },
    {
      "name": "OneType",
      "rule": "UniqueTypeNames",
      "schema": 0,
      "query": "\n      type Foo\n    ",
      "errors": []
    },
    {
      "name": "ManyTypes",
      "rule": "UniqueTypeNames",
      "schema": 0,
      "query": "\n      type Foo\n      type Bar\n      type Baz\n    ",
      "errors": []
    },
    {
      "name": "TypeAndNon-typeDefinitionsNamedTheSame",
      "rule": "UniqueTypeNames",
      "schema": 0,
      "query": "\n      query Foo { __typename }\n      fragment Foo on Query { __typename }\n      directive @Foo on SCHEMA\n\n      type Foo\n    ",
      "errors": []
    },
    {
      "name": "TypesNamedTheSame",
      "rule": "UniqueTypeNames",
      "schema": 0,
      "query": "\n      type Foo\n\n      scalar Foo\n      type Foo\n      interface Foo\n      union Foo\n      enum Foo\n      input Foo\n    ",
      "errors": [
        {
          "message": "There can be only one type named \"Foo\".",
          "locations": [
            {
              "line": 2,
              "column": 12
            },
            {
              "line": 4,
              "column": 14
            }
          ]
        },
        {
          "message": "There can be only one type named \"Foo\".",
          "locations": [
            {
              "line": 2,
              "column": 12
            },
            {
              "line": 5,
              "column": 12
            }
          ]
        },
        {
          "message": "There can be only one type named \"Foo\".",
          "locations": [
            {
              "line": 2,
              "column": 12
            },
            {
              "line": 6,
              "column": 17
            }
          ]
        },
        {
          "message": "There can be only one type named \"Foo\".",
          "locations": [
            {
              "line": 2,
              "column": 12
            },
            {
              "line": 7,
              "column": 13
            }
          ]
        },
        {
          "message": "There can be only one type named \"Foo\".",
          "locations": [
            {
              "line": 2,
              "column": 12
            },
            {
              "line": 8,
              "column": 12
            }
          ]
        },
        {
          "message": "There can be only one type named \"Foo\".",
          "locations": [
            {
              "line": 2,
              "column": 12
            },
            {
              "line": 9,
              "column": 13
            }
          ]
        }
      ]
    },
    {
      "name": "AddingNewTypeToExistingSchema",
      "rule": "UniqueTypeNames",
      "schema": 5,
      "query": "type Bar",
      "errors": []
    },
    {
      "name": "AddingNewTypeToExistingSchemaWithSame-namedDirective",
      "rule": "UniqueTypeNames",
      "schema": 21,
      "query": "type Foo",
      "errors": []
    },
    {
      "name": "AddingConflictingTypesToExistingSchema",
      "rule": "UniqueTypeNames",
      "schema": 5,
      "query": "\n      scalar Foo\n      type Foo\n      interface Foo\n      union Foo\n      enum Foo\n      input Foo\n    ",
      "errors": [
        {
          "message": "Type \"Foo\" already exists in the schema. It cannot also be defined in this type definition.",
          "locations": [
            {
              "line": 2,
              "column": 14
            }
          ]
        },
        {
          "message": "Type \"Foo\" already exists in the schema. It cannot also be defined in this type definition.",
          "locations": [
            {
              "line": 3,
              "column": 12
            }
          ]
        },
        {
          "message": "Type \"Foo\" already exists in the schema. It cannot also be defined in this type definition.",
          "locations": [
            {
              "line": 4,
              "column": 17
            }
          ]
        },
        {
          "message": "Type \"Foo\" already exists in the schema. It cannot also be defined in this type definition.",
          "locations": [
            {
              "line": 5,
              "column": 13
            }
          ]
        },
        {
          "message": "Type \"Foo\" already exists in the schema. It cannot also be defined in this type definition.",
          "locations": [
            {
              "line": 6,
              "column": 12
            }
          ]
        },
        {
          "message": "Type \"Foo\" already exists in the schema. It cannot also be defined in this type definition.",
          "locations": [
            {
              "line": 7,
              "column": 13
            }
          ]
        }
      ]
    }
  ]
}