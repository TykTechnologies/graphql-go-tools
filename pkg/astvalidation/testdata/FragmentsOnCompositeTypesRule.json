{
  "tests": [
    {
      "name": "ObjectIsValidFragmentType",
      "rule": "FragmentsOnCompositeTypes",
      "schema": 0,
      "query": "\n      fragment validFragment on Dog {\n        barks\n      }\n    ",
      "errors": []
    },
    {
      "name": "InterfaceIsValidFragmentType",
      "rule": "FragmentsOnCompositeTypes",
      "schema": 0,
      "query": "\n      fragment validFragment on Pet {\n        name\n      }\n    ",
      "errors": []
    },
    {
      "name": "ObjectIsValidInlineFragmentType",
      "rule": "FragmentsOnCompositeTypes",
      "schema": 0,
      "query": "\n      fragment validFragment on Pet {\n        ... on Dog {\n          barks\n        }\n      }\n    ",
      "errors": []
    },
    {
      "name": "InterfaceIsValidInlineFragmentType",
      "rule": "FragmentsOnCompositeTypes",
      "schema": 0,
      "query": "\n      fragment validFragment on Mammal {\n        ... on Canine {\n          name\n        }\n      }\n    ",
      "errors": []
    },
    {
      "name": "InlineFragmentWithoutTypeIsValid",
      "rule": "FragmentsOnCompositeTypes",
      "schema": 0,
      "query": "\n      fragment validFragment on Pet {\n        ... {\n          name\n        }\n      }\n    ",
      "errors": []
    },
    {
      "name": "UnionIsValidFragmentType",
      "rule": "FragmentsOnCompositeTypes",
      "schema": 0,
      "query": "\n      fragment validFragment on CatOrDog {\n        __typename\n      }\n    ",
      "errors": []
    },
    {
      "name": "ScalarIsInvalidFragmentType",
      "rule": "FragmentsOnCompositeTypes",
      "schema": 0,
      "query": "\n      fragment scalarFragment on Boolean {\n        bad\n      }\n    ",
      "errors": [
        {
          "message": "Fragment \"scalarFragment\" cannot condition on non composite type \"Boolean\".",
          "locations": [
            {
              "line": 2,
              "column": 34
            }
          ]
        }
      ]
    },
    {
      "name": "EnumIsInvalidFragmentType",
      "rule": "FragmentsOnCompositeTypes",
      "schema": 0,
      "query": "\n      fragment scalarFragment on FurColor {\n        bad\n      }\n    ",
      "errors": [
        {
          "message": "Fragment \"scalarFragment\" cannot condition on non composite type \"FurColor\".",
          "locations": [
            {
              "line": 2,
              "column": 34
            }
          ]
        }
      ]
    },
    {
      "name": "InputObjectIsInvalidFragmentType",
      "rule": "FragmentsOnCompositeTypes",
      "schema": 0,
      "query": "\n      fragment inputFragment on ComplexInput {\n        stringField\n      }\n    ",
      "errors": [
        {
          "message": "Fragment \"inputFragment\" cannot condition on non composite type \"ComplexInput\".",
          "locations": [
            {
              "line": 2,
              "column": 33
            }
          ]
        }
      ]
    },
    {
      "name": "ScalarIsInvalidInlineFragmentType",
      "rule": "FragmentsOnCompositeTypes",
      "schema": 0,
      "query": "\n      fragment invalidFragment on Pet {\n        ... on String {\n          barks\n        }\n      }\n    ",
      "errors": [
        {
          "message": "Fragment cannot condition on non composite type \"String\".",
          "locations": [
            {
              "line": 3,
              "column": 16
            }
          ]
        }
      ]
    }
  ]
}