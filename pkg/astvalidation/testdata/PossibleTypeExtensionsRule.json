{
  "tests": [
    {
      "name": "NoExtensions",
      "rule": "PossibleTypeExtensions",
      "schema": 0,
      "query": "\n      scalar FooScalar\n      type FooObject\n      interface FooInterface\n      union FooUnion\n      enum FooEnum\n      input FooInputObject\n    ",
      "errors": []
    },
    {
      "name": "OneExtensionPerType",
      "rule": "PossibleTypeExtensions",
      "schema": 0,
      "query": "\n      scalar FooScalar\n      type FooObject\n      interface FooInterface\n      union FooUnion\n      enum FooEnum\n      input FooInputObject\n\n      extend scalar FooScalar @dummy\n      extend type FooObject @dummy\n      extend interface FooInterface @dummy\n      extend union FooUnion @dummy\n      extend enum FooEnum @dummy\n      extend input FooInputObject @dummy\n    ",
      "errors": []
    },
    {
      "name": "ManyExtensionsPerType",
      "rule": "PossibleTypeExtensions",
      "schema": 0,
      "query": "\n      scalar FooScalar\n      type FooObject\n      interface FooInterface\n      union FooUnion\n      enum FooEnum\n      input FooInputObject\n\n      extend scalar FooScalar @dummy\n      extend type FooObject @dummy\n      extend interface FooInterface @dummy\n      extend union FooUnion @dummy\n      extend enum FooEnum @dummy\n      extend input FooInputObject @dummy\n\n      extend scalar FooScalar @dummy\n      extend type FooObject @dummy\n      extend interface FooInterface @dummy\n      extend union FooUnion @dummy\n      extend enum FooEnum @dummy\n      extend input FooInputObject @dummy\n    ",
      "errors": []
    },
    {
      "name": "ExtendingUnknownType",
      "rule": "PossibleTypeExtensions",
      "schema": 0,
      "query": "\n      type Known\n\n      extend scalar Unknown @dummy\n      extend type Unknown @dummy\n      extend interface Unknown @dummy\n      extend union Unknown @dummy\n      extend enum Unknown @dummy\n      extend input Unknown @dummy\n    ",
      "errors": [
        {
          "message": "Cannot extend type \"Unknown\" because it is not defined. Did you mean \"Known\"?",
          "locations": [
            {
              "line": 4,
              "column": 21
            }
          ]
        },
        {
          "message": "Cannot extend type \"Unknown\" because it is not defined. Did you mean \"Known\"?",
          "locations": [
            {
              "line": 5,
              "column": 19
            }
          ]
        },
        {
          "message": "Cannot extend type \"Unknown\" because it is not defined. Did you mean \"Known\"?",
          "locations": [
            {
              "line": 6,
              "column": 24
            }
          ]
        },
        {
          "message": "Cannot extend type \"Unknown\" because it is not defined. Did you mean \"Known\"?",
          "locations": [
            {
              "line": 7,
              "column": 20
            }
          ]
        },
        {
          "message": "Cannot extend type \"Unknown\" because it is not defined. Did you mean \"Known\"?",
          "locations": [
            {
              "line": 8,
              "column": 19
            }
          ]
        },
        {
          "message": "Cannot extend type \"Unknown\" because it is not defined. Did you mean \"Known\"?",
          "locations": [
            {
              "line": 9,
              "column": 20
            }
          ]
        }
      ]
    },
    {
      "name": "DoesNotConsiderNon-typeDefinitions",
      "rule": "PossibleTypeExtensions",
      "schema": 0,
      "query": "\n      query Foo { __typename }\n      fragment Foo on Query { __typename }\n      directive @Foo on SCHEMA\n\n      extend scalar Foo @dummy\n      extend type Foo @dummy\n      extend interface Foo @dummy\n      extend union Foo @dummy\n      extend enum Foo @dummy\n      extend input Foo @dummy\n    ",
      "errors": [
        {
          "message": "Cannot extend type \"Foo\" because it is not defined.",
          "locations": [
            {
              "line": 6,
              "column": 21
            }
          ]
        },
        {
          "message": "Cannot extend type \"Foo\" because it is not defined.",
          "locations": [
            {
              "line": 7,
              "column": 19
            }
          ]
        },
        {
          "message": "Cannot extend type \"Foo\" because it is not defined.",
          "locations": [
            {
              "line": 8,
              "column": 24
            }
          ]
        },
        {
          "message": "Cannot extend type \"Foo\" because it is not defined.",
          "locations": [
            {
              "line": 9,
              "column": 20
            }
          ]
        },
        {
          "message": "Cannot extend type \"Foo\" because it is not defined.",
          "locations": [
            {
              "line": 10,
              "column": 19
            }
          ]
        },
        {
          "message": "Cannot extend type \"Foo\" because it is not defined.",
          "locations": [
            {
              "line": 11,
              "column": 20
            }
          ]
        }
      ]
    },
    {
      "name": "ExtendingWithDifferentKinds",
      "rule": "PossibleTypeExtensions",
      "schema": 0,
      "query": "\n      scalar FooScalar\n      type FooObject\n      interface FooInterface\n      union FooUnion\n      enum FooEnum\n      input FooInputObject\n\n      extend type FooScalar @dummy\n      extend interface FooObject @dummy\n      extend union FooInterface @dummy\n      extend enum FooUnion @dummy\n      extend input FooEnum @dummy\n      extend scalar FooInputObject @dummy\n    ",
      "errors": [
        {
          "message": "Cannot extend non-object type \"FooScalar\".",
          "locations": [
            {
              "line": 2,
              "column": 7
            },
            {
              "line": 9,
              "column": 7
            }
          ]
        },
        {
          "message": "Cannot extend non-interface type \"FooObject\".",
          "locations": [
            {
              "line": 3,
              "column": 7
            },
            {
              "line": 10,
              "column": 7
            }
          ]
        },
        {
          "message": "Cannot extend non-union type \"FooInterface\".",
          "locations": [
            {
              "line": 4,
              "column": 7
            },
            {
              "line": 11,
              "column": 7
            }
          ]
        },
        {
          "message": "Cannot extend non-enum type \"FooUnion\".",
          "locations": [
            {
              "line": 5,
              "column": 7
            },
            {
              "line": 12,
              "column": 7
            }
          ]
        },
        {
          "message": "Cannot extend non-input object type \"FooEnum\".",
          "locations": [
            {
              "line": 6,
              "column": 7
            },
            {
              "line": 13,
              "column": 7
            }
          ]
        },
        {
          "message": "Cannot extend non-scalar type \"FooInputObject\".",
          "locations": [
            {
              "line": 7,
              "column": 7
            },
            {
              "line": 14,
              "column": 7
            }
          ]
        }
      ]
    },
    {
      "name": "ExtendingTypesWithinExistingSchema",
      "rule": "PossibleTypeExtensions",
      "schema": 18,
      "query": "\n      extend scalar FooScalar @dummy\n      extend type FooObject @dummy\n      extend interface FooInterface @dummy\n      extend union FooUnion @dummy\n      extend enum FooEnum @dummy\n      extend input FooInputObject @dummy\n    ",
      "errors": []
    },
    {
      "name": "ExtendingUnknownTypesWithinExistingSchema",
      "rule": "PossibleTypeExtensions",
      "schema": 19,
      "query": "\n      extend scalar Unknown @dummy\n      extend type Unknown @dummy\n      extend interface Unknown @dummy\n      extend union Unknown @dummy\n      extend enum Unknown @dummy\n      extend input Unknown @dummy\n    ",
      "errors": [
        {
          "message": "Cannot extend type \"Unknown\" because it is not defined. Did you mean \"Known\"?",
          "locations": [
            {
              "line": 2,
              "column": 21
            }
          ]
        },
        {
          "message": "Cannot extend type \"Unknown\" because it is not defined. Did you mean \"Known\"?",
          "locations": [
            {
              "line": 3,
              "column": 19
            }
          ]
        },
        {
          "message": "Cannot extend type \"Unknown\" because it is not defined. Did you mean \"Known\"?",
          "locations": [
            {
              "line": 4,
              "column": 24
            }
          ]
        },
        {
          "message": "Cannot extend type \"Unknown\" because it is not defined. Did you mean \"Known\"?",
          "locations": [
            {
              "line": 5,
              "column": 20
            }
          ]
        },
        {
          "message": "Cannot extend type \"Unknown\" because it is not defined. Did you mean \"Known\"?",
          "locations": [
            {
              "line": 6,
              "column": 19
            }
          ]
        },
        {
          "message": "Cannot extend type \"Unknown\" because it is not defined. Did you mean \"Known\"?",
          "locations": [
            {
              "line": 7,
              "column": 20
            }
          ]
        }
      ]
    },
    {
      "name": "ExtendingTypesWithDifferentKindsWithinExistingSchema",
      "rule": "PossibleTypeExtensions",
      "schema": 18,
      "query": "\n      extend type FooScalar @dummy\n      extend interface FooObject @dummy\n      extend union FooInterface @dummy\n      extend enum FooUnion @dummy\n      extend input FooEnum @dummy\n      extend scalar FooInputObject @dummy\n    ",
      "errors": [
        {
          "message": "Cannot extend non-object type \"FooScalar\".",
          "locations": [
            {
              "line": 2,
              "column": 7
            }
          ]
        },
        {
          "message": "Cannot extend non-interface type \"FooObject\".",
          "locations": [
            {
              "line": 3,
              "column": 7
            }
          ]
        },
        {
          "message": "Cannot extend non-union type \"FooInterface\".",
          "locations": [
            {
              "line": 4,
              "column": 7
            }
          ]
        },
        {
          "message": "Cannot extend non-enum type \"FooUnion\".",
          "locations": [
            {
              "line": 5,
              "column": 7
            }
          ]
        },
        {
          "message": "Cannot extend non-input object type \"FooEnum\".",
          "locations": [
            {
              "line": 6,
              "column": 7
            }
          ]
        },
        {
          "message": "Cannot extend non-scalar type \"FooInputObject\".",
          "locations": [
            {
              "line": 7,
              "column": 7
            }
          ]
        }
      ]
    }
  ]
}