{
  "tests": [
    {
      "name": "WithNoDirectives",
      "rule": "KnownDirectives",
      "schema": 0,
      "query": "\n      query Foo {\n        name\n        ...Frag\n      }\n\n      fragment Frag on Dog {\n        name\n      }\n    ",
      "errors": []
    },
    {
      "name": "WithKnownDirectives",
      "rule": "KnownDirectives",
      "schema": 0,
      "query": "\n      {\n        dog @include(if: true) {\n          name\n        }\n        human @skip(if: false) {\n          name\n        }\n      }\n    ",
      "errors": []
    },
    {
      "name": "WithUnknownDirective",
      "rule": "KnownDirectives",
      "schema": 0,
      "query": "\n      {\n        dog @unknown(directive: \"value\") {\n          name\n        }\n      }\n    ",
      "errors": [
        {
          "message": "Unknown directive \"@unknown\".",
          "locations": [
            {
              "line": 3,
              "column": 13
            }
          ]
        }
      ]
    },
    {
      "name": "WithManyUnknownDirectives",
      "rule": "KnownDirectives",
      "schema": 0,
      "query": "\n      {\n        dog @unknown(directive: \"value\") {\n          name\n        }\n        human @unknown(directive: \"value\") {\n          name\n          pets @unknown(directive: \"value\") {\n            name\n          }\n        }\n      }\n    ",
      "errors": [
        {
          "message": "Unknown directive \"@unknown\".",
          "locations": [
            {
              "line": 3,
              "column": 13
            }
          ]
        },
        {
          "message": "Unknown directive \"@unknown\".",
          "locations": [
            {
              "line": 6,
              "column": 15
            }
          ]
        },
        {
          "message": "Unknown directive \"@unknown\".",
          "locations": [
            {
              "line": 8,
              "column": 16
            }
          ]
        }
      ]
    },
    {
      "name": "WithWellPlacedDirectives",
      "rule": "KnownDirectives",
      "schema": 0,
      "query": "\n      query ($var: Boolean) @onQuery {\n        name @include(if: $var)\n        ...Frag @include(if: true)\n        skippedField @skip(if: true)\n        ...SkippedFrag @skip(if: true)\n\n        ... @skip(if: true) {\n          skippedField\n        }\n      }\n\n      mutation @onMutation {\n        someField\n      }\n\n      subscription @onSubscription {\n        someField\n      }\n\n      fragment Frag on SomeType @onFragmentDefinition {\n        someField\n      }\n    ",
      "errors": []
    },
    {
      "name": "WithWellPlacedVariableDefinitionDirective",
      "rule": "KnownDirectives",
      "schema": 0,
      "query": "\n      query Foo($var: Boolean @onVariableDefinition) {\n        name\n      }\n    ",
      "errors": []
    },
    {
      "name": "WithMisplacedDirectives",
      "rule": "KnownDirectives",
      "schema": 0,
      "query": "\n      query Foo($var: Boolean) @include(if: true) {\n        name @onQuery @include(if: $var)\n        ...Frag @onQuery\n      }\n\n      mutation Bar @onQuery {\n        someField\n      }\n    ",
      "errors": [
        {
          "message": "Directive \"@include\" may not be used on QUERY.",
          "locations": [
            {
              "line": 2,
              "column": 32
            }
          ]
        },
        {
          "message": "Directive \"@onQuery\" may not be used on FIELD.",
          "locations": [
            {
              "line": 3,
              "column": 14
            }
          ]
        },
        {
          "message": "Directive \"@onQuery\" may not be used on FRAGMENT_SPREAD.",
          "locations": [
            {
              "line": 4,
              "column": 17
            }
          ]
        },
        {
          "message": "Directive \"@onQuery\" may not be used on MUTATION.",
          "locations": [
            {
              "line": 7,
              "column": 20
            }
          ]
        }
      ]
    },
    {
      "name": "WithMisplacedVariableDefinitionDirective",
      "rule": "KnownDirectives",
      "schema": 0,
      "query": "\n      query Foo($var: Boolean @onField) {\n        name\n      }\n    ",
      "errors": [
        {
          "message": "Directive \"@onField\" may not be used on VARIABLE_DEFINITION.",
          "locations": [
            {
              "line": 2,
              "column": 31
            }
          ]
        }
      ]
    },
    {
      "name": "WithDirectiveDefinedInsideSDL",
      "rule": "KnownDirectives",
      "schema": 0,
      "query": "\n        type Query {\n          foo: String @test\n        }\n\n        directive @test on FIELD_DEFINITION\n      ",
      "errors": []
    },
    {
      "name": "WithStandardDirective",
      "rule": "KnownDirectives",
      "schema": 0,
      "query": "\n        type Query {\n          foo: String @deprecated\n        }\n      ",
      "errors": []
    },
    {
      "name": "WithOverriddenStandardDirective",
      "rule": "KnownDirectives",
      "schema": 0,
      "query": "\n        schema @deprecated {\n          query: Query\n        }\n        directive @deprecated on SCHEMA\n      ",
      "errors": []
    },
    {
      "name": "WithDirectiveDefinedInSchemaExtension",
      "rule": "KnownDirectives",
      "schema": 1,
      "query": "\n          directive @test on OBJECT\n\n          extend type Query @test\n        ",
      "errors": []
    },
    {
      "name": "WithDirectiveUsedInSchemaExtension",
      "rule": "KnownDirectives",
      "schema": 3,
      "query": "\n          extend type Query @test\n        ",
      "errors": []
    },
    {
      "name": "WithUnknownDirectiveInSchemaExtension",
      "rule": "KnownDirectives",
      "schema": 1,
      "query": "\n          extend type Query @unknown\n        ",
      "errors": [
        {
          "message": "Unknown directive \"@unknown\".",
          "locations": [
            {
              "line": 2,
              "column": 29
            }
          ]
        }
      ]
    },
    {
      "name": "WithWellPlacedDirectives",
      "rule": "KnownDirectives",
      "schema": 4,
      "query": "\n          type MyObj implements MyInterface @onObject {\n            myField(myArg: Int @onArgumentDefinition): String @onFieldDefinition\n          }\n\n          extend type MyObj @onObject\n\n          scalar MyScalar @onScalar\n\n          extend scalar MyScalar @onScalar\n\n          interface MyInterface @onInterface {\n            myField(myArg: Int @onArgumentDefinition): String @onFieldDefinition\n          }\n\n          extend interface MyInterface @onInterface\n\n          union MyUnion @onUnion = MyObj | Other\n\n          extend union MyUnion @onUnion\n\n          enum MyEnum @onEnum {\n            MY_VALUE @onEnumValue\n          }\n\n          extend enum MyEnum @onEnum\n\n          input MyInput @onInputObject {\n            myField: Int @onInputFieldDefinition\n          }\n\n          extend input MyInput @onInputObject\n\n          schema @onSchema {\n            query: MyQuery\n          }\n\n          extend schema @onSchema\n        ",
      "errors": []
    },
    {
      "name": "WithMisplacedDirectives",
      "rule": "KnownDirectives",
      "schema": 4,
      "query": "\n          type MyObj implements MyInterface @onInterface {\n            myField(myArg: Int @onInputFieldDefinition): String @onInputFieldDefinition\n          }\n\n          scalar MyScalar @onEnum\n\n          interface MyInterface @onObject {\n            myField(myArg: Int @onInputFieldDefinition): String @onInputFieldDefinition\n          }\n\n          union MyUnion @onEnumValue = MyObj | Other\n\n          enum MyEnum @onScalar {\n            MY_VALUE @onUnion\n          }\n\n          input MyInput @onEnum {\n            myField: Int @onArgumentDefinition\n          }\n\n          schema @onObject {\n            query: MyQuery\n          }\n\n          extend schema @onObject\n        ",
      "errors": [
        {
          "message": "Directive \"@onInterface\" may not be used on OBJECT.",
          "locations": [
            {
              "line": 2,
              "column": 45
            }
          ]
        },
        {
          "message": "Directive \"@onInputFieldDefinition\" may not be used on ARGUMENT_DEFINITION.",
          "locations": [
            {
              "line": 3,
              "column": 32
            }
          ]
        },
        {
          "message": "Directive \"@onInputFieldDefinition\" may not be used on FIELD_DEFINITION.",
          "locations": [
            {
              "line": 3,
              "column": 65
            }
          ]
        },
        {
          "message": "Directive \"@onEnum\" may not be used on SCALAR.",
          "locations": [
            {
              "line": 6,
              "column": 27
            }
          ]
        },
        {
          "message": "Directive \"@onObject\" may not be used on INTERFACE.",
          "locations": [
            {
              "line": 8,
              "column": 33
            }
          ]
        },
        {
          "message": "Directive \"@onInputFieldDefinition\" may not be used on ARGUMENT_DEFINITION.",
          "locations": [
            {
              "line": 9,
              "column": 32
            }
          ]
        },
        {
          "message": "Directive \"@onInputFieldDefinition\" may not be used on FIELD_DEFINITION.",
          "locations": [
            {
              "line": 9,
              "column": 65
            }
          ]
        },
        {
          "message": "Directive \"@onEnumValue\" may not be used on UNION.",
          "locations": [
            {
              "line": 12,
              "column": 25
            }
          ]
        },
        {
          "message": "Directive \"@onScalar\" may not be used on ENUM.",
          "locations": [
            {
              "line": 14,
              "column": 23
            }
          ]
        },
        {
          "message": "Directive \"@onUnion\" may not be used on ENUM_VALUE.",
          "locations": [
            {
              "line": 15,
              "column": 22
            }
          ]
        },
        {
          "message": "Directive \"@onEnum\" may not be used on INPUT_OBJECT.",
          "locations": [
            {
              "line": 18,
              "column": 25
            }
          ]
        },
        {
          "message": "Directive \"@onArgumentDefinition\" may not be used on INPUT_FIELD_DEFINITION.",
          "locations": [
            {
              "line": 19,
              "column": 26
            }
          ]
        },
        {
          "message": "Directive \"@onObject\" may not be used on SCHEMA.",
          "locations": [
            {
              "line": 22,
              "column": 18
            }
          ]
        },
        {
          "message": "Directive \"@onObject\" may not be used on SCHEMA.",
          "locations": [
            {
              "line": 26,
              "column": 25
            }
          ]
        }
      ]
    }
  ]
}