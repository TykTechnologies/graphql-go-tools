{
  "tests": [
    {
      "name": "ValidScalarSelection",
      "rule": "ScalarLeafs",
      "schema": 0,
      "query": "\n      fragment scalarSelection on Dog {\n        barks\n      }\n    ",
      "errors": []
    },
    {
      "name": "ObjectTypeMissingSelection",
      "rule": "ScalarLeafs",
      "schema": 0,
      "query": "\n      query directQueryOnObjectWithoutSubFields {\n        human\n      }\n    ",
      "errors": [
        {
          "message": "Field \"human\" of type \"Human\" must have a selection of subfields. Did you mean \"human { ... }\"?",
          "locations": [
            {
              "line": 3,
              "column": 9
            }
          ]
        }
      ]
    },
    {
      "name": "InterfaceTypeMissingSelection",
      "rule": "ScalarLeafs",
      "schema": 0,
      "query": "\n      {\n        human { pets }\n      }\n    ",
      "errors": [
        {
          "message": "Field \"pets\" of type \"[Pet]\" must have a selection of subfields. Did you mean \"pets { ... }\"?",
          "locations": [
            {
              "line": 3,
              "column": 17
            }
          ]
        }
      ]
    },
    {
      "name": "ValidScalarSelectionWithArgs",
      "rule": "ScalarLeafs",
      "schema": 0,
      "query": "\n      fragment scalarSelectionWithArgs on Dog {\n        doesKnowCommand(dogCommand: SIT)\n      }\n    ",
      "errors": []
    },
    {
      "name": "ScalarSelectionNotAllowedOnBoolean",
      "rule": "ScalarLeafs",
      "schema": 0,
      "query": "\n      fragment scalarSelectionsNotAllowedOnBoolean on Dog {\n        barks { sinceWhen }\n      }\n    ",
      "errors": [
        {
          "message": "Field \"barks\" must not have a selection since type \"Boolean\" has no subfields.",
          "locations": [
            {
              "line": 3,
              "column": 15
            }
          ]
        }
      ]
    },
    {
      "name": "ScalarSelectionNotAllowedOnEnum",
      "rule": "ScalarLeafs",
      "schema": 0,
      "query": "\n      fragment scalarSelectionsNotAllowedOnEnum on Cat {\n        furColor { inHexDec }\n      }\n    ",
      "errors": [
        {
          "message": "Field \"furColor\" must not have a selection since type \"FurColor\" has no subfields.",
          "locations": [
            {
              "line": 3,
              "column": 18
            }
          ]
        }
      ]
    },
    {
      "name": "ScalarSelectionNotAllowedWithArgs",
      "rule": "ScalarLeafs",
      "schema": 0,
      "query": "\n      fragment scalarSelectionsNotAllowedWithArgs on Dog {\n        doesKnowCommand(dogCommand: SIT) { sinceWhen }\n      }\n    ",
      "errors": [
        {
          "message": "Field \"doesKnowCommand\" must not have a selection since type \"Boolean\" has no subfields.",
          "locations": [
            {
              "line": 3,
              "column": 42
            }
          ]
        }
      ]
    },
    {
      "name": "ScalarSelectionNotAllowedWithDirectives",
      "rule": "ScalarLeafs",
      "schema": 0,
      "query": "\n      fragment scalarSelectionsNotAllowedWithDirectives on Dog {\n        name @include(if: true) { isAlsoHumanName }\n      }\n    ",
      "errors": [
        {
          "message": "Field \"name\" must not have a selection since type \"String\" has no subfields.",
          "locations": [
            {
              "line": 3,
              "column": 33
            }
          ]
        }
      ]
    },
    {
      "name": "ScalarSelectionNotAllowedWithDirectivesAndArgs",
      "rule": "ScalarLeafs",
      "schema": 0,
      "query": "\n      fragment scalarSelectionsNotAllowedWithDirectivesAndArgs on Dog {\n        doesKnowCommand(dogCommand: SIT) @include(if: true) { sinceWhen }\n      }\n    ",
      "errors": [
        {
          "message": "Field \"doesKnowCommand\" must not have a selection since type \"Boolean\" has no subfields.",
          "locations": [
            {
              "line": 3,
              "column": 61
            }
          ]
        }
      ]
    }
  ]
}