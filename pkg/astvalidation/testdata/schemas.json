{
  "schemas": [
    "schema {\n  query: QueryRoot\n}\n\ndirective @onQuery on QUERY\n\ndirective @onMutation on MUTATION\n\ndirective @onSubscription on SUBSCRIPTION\n\ndirective @onField on FIELD\n\ndirective @onFragmentDefinition on FRAGMENT_DEFINITION\n\ndirective @onFragmentSpread on FRAGMENT_SPREAD\n\ndirective @onInlineFragment on INLINE_FRAGMENT\n\ndirective @onVariableDefinition on VARIABLE_DEFINITION\n\ninterface Being {\n  name(surname: Boolean): String\n}\n\ninterface Mammal {\n  mother: Mammal\n  father: Mammal\n}\n\ninterface Pet implements Being {\n  name(surname: Boolean): String\n}\n\ninterface Canine implements Mammal & Being {\n  name(surname: Boolean): String\n  mother: Canine\n  father: Canine\n}\n\nenum DogCommand {\n  SIT\n  HEEL\n  DOWN\n}\n\ntype Dog implements Being & Pet & Mammal & Canine {\n  name(surname: Boolean): String\n  nickname: String\n  barkVolume: Int\n  barks: Boolean\n  doesKnowCommand(dogCommand: DogCommand): Boolean\n  isHouseTrained(atOtherHomes: Boolean = true): Boolean\n  isAtLocation(x: Int, y: Int): Boolean\n  mother: Dog\n  father: Dog\n}\n\ntype Cat implements Being & Pet {\n  name(surname: Boolean): String\n  nickname: String\n  meows: Boolean\n  meowsVolume: Int\n  furColor: FurColor\n}\n\nunion CatOrDog = Cat | Dog\n\ninterface Intelligent {\n  iq: Int\n}\n\ntype Human implements Being & Intelligent {\n  name(surname: Boolean): String\n  pets: [Pet]\n  relatives: [Human]\n  iq: Int\n}\n\ntype Alien implements Being & Intelligent {\n  name(surname: Boolean): String\n  numEyes: Int\n  iq: Int\n}\n\nunion DogOrHuman = Dog | Human\n\nunion HumanOrAlien = Human | Alien\n\nenum FurColor {\n  BROWN\n  BLACK\n  TAN\n  SPOTTED\n  NO_FUR\n  UNKNOWN\n}\n\ninput ComplexInput {\n  requiredField: Boolean!\n  nonNullField: Boolean! = false\n  intField: Int\n  stringField: String\n  booleanField: Boolean\n  stringListField: [String]\n}\n\ntype ComplicatedArgs {\n  intArgField(intArg: Int): String\n  nonNullIntArgField(nonNullIntArg: Int!): String\n  stringArgField(stringArg: String): String\n  booleanArgField(booleanArg: Boolean): String\n  enumArgField(enumArg: FurColor): String\n  floatArgField(floatArg: Float): String\n  idArgField(idArg: ID): String\n  stringListArgField(stringListArg: [String]): String\n  stringListNonNullArgField(stringListNonNullArg: [String!]): String\n  complexArgField(complexArg: ComplexInput): String\n  multipleReqs(req1: Int!, req2: Int!): String\n  nonNullFieldWithDefault(arg: Int! = 0): String\n  multipleOpts(opt1: Int = 0, opt2: Int = 0): String\n  multipleOptAndReq(req1: Int!, req2: Int!, opt1: Int = 0, opt2: Int = 0): String\n}\n\ntype QueryRoot {\n  human(id: ID): Human\n  alien: Alien\n  dog: Dog\n  cat: Cat\n  pet: Pet\n  catOrDog: CatOrDog\n  dogOrHuman: DogOrHuman\n  humanOrAlien: HumanOrAlien\n  complicatedArgs: ComplicatedArgs\n}\n",
    "type Query {\n  foo: String\n}\n",
    "directive @test(arg: String) on OBJECT\n\ntype Query {\n  foo: String\n}\n",
    "directive @test on OBJECT\n\ntype Query {\n  foo: String\n}\n",
    "directive @onSchema on SCHEMA\n\ndirective @onScalar on SCALAR\n\ndirective @onObject on OBJECT\n\ndirective @onFieldDefinition on FIELD_DEFINITION\n\ndirective @onArgumentDefinition on ARGUMENT_DEFINITION\n\ndirective @onInterface on INTERFACE\n\ndirective @onUnion on UNION\n\ndirective @onEnum on ENUM\n\ndirective @onEnumValue on ENUM_VALUE\n\ndirective @onInputObject on INPUT_OBJECT\n\ndirective @onInputFieldDefinition on INPUT_FIELD_DEFINITION\n",
    "type Foo\n",
    "type A\n",
    "type Foo {\n  foo: String\n}\n",
    "schema {\n  query: Foo\n}\n\ntype Foo {\n  foo: String\n}\n",
    "type Query {\n  fooField: Foo\n}\n\ntype Foo {\n  foo: String\n}\n",
    "type Query {\n  normalField: String\n  deprecatedField: String @deprecated(reason: \"Some field reason.\")\n}\n",
    "type Query {\n  someField(normalArg: String, deprecatedArg: String @deprecated(reason: \"Some arg reason.\")): String\n}\n",
    "directive @someDirective(normalArg: String, deprecatedArg: String @deprecated(reason: \"Some arg reason.\")) on FIELD\n\ntype Query {\n  someField: String\n}\n",
    "directive @someDirective(someArg: InputType) on FIELD\n\ninput InputType {\n  normalField: String\n  deprecatedField: String @deprecated(reason: \"Some input field reason.\")\n}\n\ntype Query {\n  someField(someArg: InputType): String\n}\n",
    "enum EnumType {\n  NORMAL_VALUE\n  DEPRECATED_VALUE @deprecated(reason: \"Some enum reason.\")\n}\n\ntype Query {\n  someField(enumArg: EnumType): String\n}\n",
    "type Query {\n  someQuery: SomeType\n}\n\ntype SomeType {\n  someField: String\n  introspectionField: __EnumValue\n}\n",
    "interface SomeBox {\n  deepBox: SomeBox\n  unrelatedField: String\n}\n\ntype StringBox implements SomeBox {\n  scalar: String\n  deepBox: StringBox\n  unrelatedField: String\n  listStringBox: [StringBox]\n  stringBox: StringBox\n  intBox: IntBox\n}\n\ntype IntBox implements SomeBox {\n  scalar: Int\n  deepBox: IntBox\n  unrelatedField: String\n  listStringBox: [StringBox]\n  stringBox: StringBox\n  intBox: IntBox\n}\n\ninterface NonNullStringBox1 {\n  scalar: String!\n}\n\ntype NonNullStringBox1Impl implements SomeBox & NonNullStringBox1 {\n  scalar: String!\n  unrelatedField: String\n  deepBox: SomeBox\n}\n\ninterface NonNullStringBox2 {\n  scalar: String!\n}\n\ntype NonNullStringBox2Impl implements SomeBox & NonNullStringBox2 {\n  scalar: String!\n  unrelatedField: String\n  deepBox: SomeBox\n}\n\ntype Connection {\n  edges: [Edge]\n}\n\ntype Edge {\n  node: Node\n}\n\ntype Node {\n  id: ID\n  name: String\n}\n\ntype Query {\n  someBox: SomeBox\n  connection: Connection\n}\n",
    "type Foo {\n  constructor: String\n}\n\ntype Query {\n  foo: Foo\n}\n",
    "scalar FooScalar\n\ntype FooObject\n\ninterface FooInterface\n\nunion FooUnion\n\nenum FooEnum\n\ninput FooInputObject\n",
    "type Known\n",
    "directive @test(arg: String!) on OBJECT\n\ntype Query {\n  foo: String\n}\n",
    "directive @foo on SCHEMA\n",
    "schema {\n  query: QueryRoot\n}\n\ndirective @onQuery on QUERY\n\ndirective @onMutation on MUTATION\n\ndirective @onSubscription on SUBSCRIPTION\n\ndirective @onField on FIELD\n\ndirective @onFragmentDefinition on FRAGMENT_DEFINITION\n\ndirective @onFragmentSpread on FRAGMENT_SPREAD\n\ndirective @onInlineFragment on INLINE_FRAGMENT\n\ndirective @onVariableDefinition on VARIABLE_DEFINITION\n\ndirective @directive on FIELD | FRAGMENT_DEFINITION\n\ndirective @directiveA on FIELD | FRAGMENT_DEFINITION\n\ndirective @directiveB on FIELD | FRAGMENT_DEFINITION\n\ndirective @repeatable repeatable on FIELD | FRAGMENT_DEFINITION\n\ninterface Being {\n  name(surname: Boolean): String\n}\n\ninterface Mammal {\n  mother: Mammal\n  father: Mammal\n}\n\ninterface Pet implements Being {\n  name(surname: Boolean): String\n}\n\ninterface Canine implements Mammal & Being {\n  name(surname: Boolean): String\n  mother: Canine\n  father: Canine\n}\n\nenum DogCommand {\n  SIT\n  HEEL\n  DOWN\n}\n\ntype Dog implements Being & Pet & Mammal & Canine {\n  name(surname: Boolean): String\n  nickname: String\n  barkVolume: Int\n  barks: Boolean\n  doesKnowCommand(dogCommand: DogCommand): Boolean\n  isHouseTrained(atOtherHomes: Boolean = true): Boolean\n  isAtLocation(x: Int, y: Int): Boolean\n  mother: Dog\n  father: Dog\n}\n\ntype Cat implements Being & Pet {\n  name(surname: Boolean): String\n  nickname: String\n  meows: Boolean\n  meowsVolume: Int\n  furColor: FurColor\n}\n\nunion CatOrDog = Cat | Dog\n\ninterface Intelligent {\n  iq: Int\n}\n\ntype Human implements Being & Intelligent {\n  name(surname: Boolean): String\n  pets: [Pet]\n  relatives: [Human]\n  iq: Int\n}\n\ntype Alien implements Being & Intelligent {\n  name(surname: Boolean): String\n  numEyes: Int\n  iq: Int\n}\n\nunion DogOrHuman = Dog | Human\n\nunion HumanOrAlien = Human | Alien\n\nenum FurColor {\n  BROWN\n  BLACK\n  TAN\n  SPOTTED\n  NO_FUR\n  UNKNOWN\n}\n\ninput ComplexInput {\n  requiredField: Boolean!\n  nonNullField: Boolean! = false\n  intField: Int\n  stringField: String\n  booleanField: Boolean\n  stringListField: [String]\n}\n\ntype ComplicatedArgs {\n  intArgField(intArg: Int): String\n  nonNullIntArgField(nonNullIntArg: Int!): String\n  stringArgField(stringArg: String): String\n  booleanArgField(booleanArg: Boolean): String\n  enumArgField(enumArg: FurColor): String\n  floatArgField(floatArg: Float): String\n  idArgField(idArg: ID): String\n  stringListArgField(stringListArg: [String]): String\n  stringListNonNullArgField(stringListNonNullArg: [String!]): String\n  complexArgField(complexArg: ComplexInput): String\n  multipleReqs(req1: Int!, req2: Int!): String\n  nonNullFieldWithDefault(arg: Int! = 0): String\n  multipleOpts(opt1: Int = 0, opt2: Int = 0): String\n  multipleOptAndReq(req1: Int!, req2: Int!, opt1: Int = 0, opt2: Int = 0): String\n}\n\ntype QueryRoot {\n  human(id: ID): Human\n  alien: Alien\n  dog: Dog\n  cat: Cat\n  pet: Pet\n  catOrDog: CatOrDog\n  dogOrHuman: DogOrHuman\n  humanOrAlien: HumanOrAlien\n  complicatedArgs: ComplicatedArgs\n}\n",
    "enum SomeEnum\n",
    "enum SomeEnum {\n  FOO\n}\n",
    "type SomeObject\n\ninterface SomeInterface\n\ninput SomeInputObject\n",
    "type SomeObject {\n  foo: String\n}\n\ninterface SomeInterface {\n  foo: String\n}\n\ninput SomeInputObject {\n  foo: String\n}\n",
    "type Query\n",
    "type Query\n\ntype Mutation\n\ntype Subscription\n\ntype Foo\n",
    "type Query\n\ntype Mutation\n\ntype Subscription\n",
    "type Query {\n  invalidArg(arg: Invalid): String\n}\n\nscalar Invalid\n",
    "type Query {\n  invalidArg(arg: CustomScalar): String\n}\n\nscalar CustomScalar\n",
    "type Query {\n  anyArg(arg: Any): String\n}\n\nscalar Any\n"
  ]
}