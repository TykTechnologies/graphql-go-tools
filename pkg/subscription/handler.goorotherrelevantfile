package subscription

import (
	"context"
	"time"
)

// StartTimeout starts a timeout with the given duration.
// It returns a channel that will be closed when the timeout is reached.
func StartTimeout(ctx context.Context, duration time.Duration) <-chan time.Time {
	return time.After(duration)
}

// HandleTimeout waits for the timeout channel to be closed and then executes the given function.
// If the context is done before the timeout is reached, it returns without executing the function.
func HandleTimeout(ctx context.Context, timeout <-chan time.Time, onTimeout func()) {
	select {
	case <-timeout:
		onTimeout()
	case <-ctx.Done():
		// Context is done before timeout, do nothing.
	}
}