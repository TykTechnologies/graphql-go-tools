// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package subscription is a generated GoMock package.
package subscription

import (
	context "context"
	reflect "reflect"

	ast "github.com/TykTechnologies/graphql-go-tools/pkg/ast"
	resolve "github.com/TykTechnologies/graphql-go-tools/pkg/engine/resolve"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Disconnect mocks base method.
func (m *MockClient) Disconnect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockClientMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockClient)(nil).Disconnect))
}

// IsConnected mocks base method.
func (m *MockClient) IsConnected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConnected indicates an expected call of IsConnected.
func (mr *MockClientMockRecorder) IsConnected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnected", reflect.TypeOf((*MockClient)(nil).IsConnected))
}

// ReadFromClient mocks base method.
func (m *MockClient) ReadFromClient() (*Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFromClient")
	ret0, _ := ret[0].(*Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFromClient indicates an expected call of ReadFromClient.
func (mr *MockClientMockRecorder) ReadFromClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFromClient", reflect.TypeOf((*MockClient)(nil).ReadFromClient))
}

// WriteToClient mocks base method.
func (m *MockClient) WriteToClient(arg0 Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteToClient", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteToClient indicates an expected call of WriteToClient.
func (mr *MockClientMockRecorder) WriteToClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteToClient", reflect.TypeOf((*MockClient)(nil).WriteToClient), arg0)
}

// MockExecutorPool is a mock of ExecutorPool interface.
type MockExecutorPool struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorPoolMockRecorder
}

// MockExecutorPoolMockRecorder is the mock recorder for MockExecutorPool.
type MockExecutorPoolMockRecorder struct {
	mock *MockExecutorPool
}

// NewMockExecutorPool creates a new mock instance.
func NewMockExecutorPool(ctrl *gomock.Controller) *MockExecutorPool {
	mock := &MockExecutorPool{ctrl: ctrl}
	mock.recorder = &MockExecutorPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutorPool) EXPECT() *MockExecutorPoolMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockExecutorPool) Get(payload []byte) (Executor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", payload)
	ret0, _ := ret[0].(Executor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockExecutorPoolMockRecorder) Get(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExecutorPool)(nil).Get), payload)
}

// Put mocks base method.
func (m *MockExecutorPool) Put(executor Executor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", executor)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockExecutorPoolMockRecorder) Put(executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockExecutorPool)(nil).Put), executor)
}

// MockExecutor is a mock of Executor interface.
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor.
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance.
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockExecutor) Execute(writer resolve.FlushWriter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", writer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockExecutorMockRecorder) Execute(writer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockExecutor)(nil).Execute), writer)
}

// OperationType mocks base method.
func (m *MockExecutor) OperationType() ast.OperationType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperationType")
	ret0, _ := ret[0].(ast.OperationType)
	return ret0
}

// OperationType indicates an expected call of OperationType.
func (mr *MockExecutorMockRecorder) OperationType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationType", reflect.TypeOf((*MockExecutor)(nil).OperationType))
}

// Reset mocks base method.
func (m *MockExecutor) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockExecutorMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockExecutor)(nil).Reset))
}

// SetContext mocks base method.
func (m *MockExecutor) SetContext(context context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetContext", context)
}

// SetContext indicates an expected call of SetContext.
func (mr *MockExecutorMockRecorder) SetContext(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContext", reflect.TypeOf((*MockExecutor)(nil).SetContext), context)
}
