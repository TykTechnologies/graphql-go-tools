schema {
    query: Query
    mutation: Mutation
}

type Query {
    employeesGet(department: String, job: String): [EmployeeBodyFormatted]
    employeesIdGet(id: String): EmployeeBody
}

type Mutation {
    employeesIdDelete(id: String): EmployeeNumber
    employeesIdPut(employeeBodyInput: EmployeeBodyInput): EmployeeBody
    employeesPost(employeeBodyInput: EmployeeBodyInput): EmployeeBody
}

type EmployeeBody {
    bonus: Float
    commission: Float
    dateOfBirth: String
    department: String
    educationLevel: Int
    employeeNumber: String
    firstName: String
    hireDate: String
    job: String
    lastName: String
    middleInitial: String
    phoneNumber: String
    salary: Float
    sex: String
}

type EmployeeBodyFormatted {
    personal: EmployeePersonalDetails
    summary: EmployeeSummary
    work: EmployeeWorkDetails
}

input EmployeeBodyInput {
    bonus: Float
    commission: Float
    dateOfBirth: String
    department: String
    educationLevel: Int
    employeeNumber: String
    firstName: String
    hireDate: String
    job: String
    lastName: String
    middleInitial: String
    phoneNumber: String
    salary: Float
    sex: String
}

type EmployeeNumber {
    message: String
}

type EmployeePersonalDetails {
    dateOfBirth: String
    firstName: String
    lastName: String
    middleInitial: String
    sex: String
}

type EmployeeSummary {
    bio: String
}

type EmployeeWorkDetails {
    department: String
    educationLevel: Int
    employeeNumber: String
    hireDate: String
    job: String
    pay: EmployeeWorkPay
    phoneNumber: String
}

type EmployeeWorkPay {
    bonus: Float
    commission: Float
    salary: Float
}